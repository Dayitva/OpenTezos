(self.webpackChunkopentezos=self.webpackChunkopentezos||[]).push([[9696],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=n.createContext({}),o=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),k=o(a),d=i,u=k["".concat(c,".").concat(d)]||k[d]||m[d]||s;return a?n.createElement(u,l(l({ref:t},p),{},{components:a})):n.createElement(u,l({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=a.length,l=new Array(s);l[0]=k;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var o=2;o<s;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},481:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return l},metadata:function(){return r},toc:function(){return c},default:function(){return p}});var n=a(2122),i=a(9756),s=(a(7294),a(3905)),l={id:"exam",title:"Exam",authors:"Maxime Sallerin"},r={unversionedId:"smartpy/exam",id:"smartpy/exam",isDocsHomePage:!1,title:"Exam",description:"Question 1",source:"@site/docs/smartpy/exam.md",sourceDirName:"smartpy",slug:"/smartpy/exam",permalink:"/smartpy/exam",editUrl:"https://github.com/octo-technology/OpenTezos/tree/main/docs/smartpy/exam.md",version:"current",lastUpdatedBy:"AymericBethencourt",lastUpdatedAt:1621326261,formattedLastUpdatedAt:"5/18/2021",frontMatter:{id:"exam",title:"Exam",authors:"Maxime Sallerin"},sidebar:"docs",previous:{title:"Smart contract development with SmartPy",permalink:"/smartpy/write-contract-smartpy"},next:{title:"Introduction",permalink:"/ligo"}},c=[{value:"Question 1",id:"question-1",children:[]},{value:"Question 2",id:"question-2",children:[]},{value:"Question 3",id:"question-3",children:[]},{value:"Question 4",id:"question-4",children:[]},{value:"Question 5",id:"question-5",children:[]},{value:"Question 6",id:"question-6",children:[]},{value:"Question 7",id:"question-7",children:[{value:"Question 8",id:"question-8",children:[]},{value:"Question 9 and 10",id:"question-9-and-10",children:[]}]}],o={toc:c};function p(e){var t=e.components,a=(0,i.Z)(e,["components"]);return(0,s.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"question-1"},"Question 1"),(0,s.kt)("p",null,"What notions are defined inside the smart contract?"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","The type definition of the storage"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The balance of the contract"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The initial value of the storage"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The value of the entrypoint and its related parameters"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","The type definition of the entrypoint"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The size of the storage"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","The code of the smart contract")),(0,s.kt)("h3",{id:"question-2"},"Question 2"),(0,s.kt)("p",null,"What is returned by the execution of a smart contract?"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The current storage state when invoking the smart contract"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","The modified storage state after the invocation of the smart contract"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The entrypoint that has been called (and its related parameters)"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","The list of emitted operations produced by the execution of the smart contract"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The balance of the contract"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The size of the storage"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The code of the smart contract"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","The list of users allowed to call the smart contract")),(0,s.kt)("h3",{id:"question-3"},"Question 3"),(0,s.kt)("p",null,"What can you do with the SmartPy online editor?"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Write, test and run your code"),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Visualize the generated Michelson code and storage. "),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","View the results of the tests as an HTML document. "),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Access a panel of several smart contract templates.")),(0,s.kt)("h3",{id:"question-4"},"Question 4"),(0,s.kt)("p",null,"What is a ",(0,s.kt)("em",{parentName:"p"},"SmartPy")," smart contract?"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","It is a class of method called ",(0,s.kt)("inlineCode",{parentName:"li"},"main")," taking as input a storage and parameters, returning a list of operations and a modified storage."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","It is a class definition that inherits from ",(0,s.kt)("inlineCode",{parentName:"li"},"sp.Contract"),". A SmartPy contract consists of a state with one or several entry points.")),(0,s.kt)("h3",{id:"question-5"},"Question 5"),(0,s.kt)("p",null,"What is the correct way to add an integer ",(0,s.kt)("inlineCode",{parentName:"p"},"x")," initialized to ",(0,s.kt)("inlineCode",{parentName:"p"},"0")," to the storage?"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@sp.storage\ndef __init__(self):\n    self.init(x = 0)\n")),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@sp.storage\ndef storage(self):\n    self.x = 0\n")),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(self):\n    self.init(x = 0)\n")),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(self):\n    self.x = 0\n")),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"def __storage__(self):\n    self.init(x = 0)\n")),(0,s.kt)("h3",{id:"question-6"},"Question 6"),(0,s.kt)("p",null,"What is true about the definition of entrypoints with SmartPy?"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Entrypoints are methods of a contract class that can be called from the outside."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Entrypoints are class definition that inherits from ",(0,s.kt)("inlineCode",{parentName:"li"},"sp.Contract"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Entrypoints return values in Michelson."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Entrypoints need to be marked with the ",(0,s.kt)("inlineCode",{parentName:"li"},"@sp.entry_point")," decorator.")),(0,s.kt)("h2",{id:"question-7"},"Question 7"),(0,s.kt)("p",null,"What is true about tests and scenarios with SmartPy?"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","A new test is a method marked with the ",(0,s.kt)("inlineCode",{parentName:"li"},"sp.add_test")," decorator."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","A new scenario is instantiated by ",(0,s.kt)("inlineCode",{parentName:"li"},"sp.test_scenario"),"."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Scenarios describe a sequence of actions: originating contracts, computing expressions, calling entry points, etc."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","SmartPy provides the possibility to generate test accounts with ",(0,s.kt)("inlineCode",{parentName:"li"},"sp.test_account(seed)")," which contain the following fields: ",(0,s.kt)("inlineCode",{parentName:"li"},"account.address"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"account.public_key_hash"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"account.public_key"),", and ",(0,s.kt)("inlineCode",{parentName:"li"},"account.secret_key"),".")),(0,s.kt)("h3",{id:"question-8"},"Question 8"),(0,s.kt)("p",null,"What is true about types with SmartPy?"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","SmartPy expressions do not have a type."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Just like in Python, most of the time, there is no need to specify the type of the object in SmartPy."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","SmartPy uses type inference to determine each expression's type."),(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","SmartPy types are all in the form ",(0,s.kt)("inlineCode",{parentName:"li"},"sp.T<TypeName>"),".")),(0,s.kt)("h3",{id:"question-9-and-10"},"Question 9 and 10"),(0,s.kt)("p",null,"For the next two questions let's consider the following piece of code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"class Hello(sp.Contract):\n    def __init__(self):\n        self.init(x = 0)\n\n    @sp.entry_point\n    def set_x(newX):\n        # Todo : set x from the storage to newX\n")),(0,s.kt)("p",null,"What is the correct way to set x from the storage to ",(0,s.kt)("inlineCode",{parentName:"p"},"newX"),"."),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",".")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@sp.entry_point\ndef set_x(newX):\n    self.x = newX\n")),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ",".")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@sp.entry_point\ndef set_x(newX):\n    self.data.x = newX\n")),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",".")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@sp.entry_point\ndef set_x(newX):\n    x = newX\n")),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",".")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"@sp.entry_point\ndef set_x(newX):\n    newX = self.data.x\n")),(0,s.kt)("p",null,"What is the correct way to modify the code to check that ",(0,s.kt)("inlineCode",{parentName:"p"},"newX")," is greater than 0 for the entrypoint ",(0,s.kt)("inlineCode",{parentName:"p"},"set_x"),"? (If not, we want the entrypoint invocation to fail and return an error message.)"),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'@sp.entry_point\ndef set_x(newX):\n    verify(newX >= 0, message="x must be a positive number")\n    self.data.x = newX\n')),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'@sp.entry_point\ndef set_x(newX):\n    sp.if(newX >= 0, message="x must be a positive number"):\n        self.data.x = newX\n')),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'@sp.entry_point\ndef set_x(newX):\n    sp.verify(newX >= 0, message="x must be a positive number")\n    self.data.x = newX\n')),(0,s.kt)("ul",{className:"contains-task-list"},(0,s.kt)("li",{parentName:"ul",className:"task-list-item"},(0,s.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0}))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'@sp.entry_point\ndef set_x(newX):\n    sp.check(newX >= 0, message="x must be a positive number")\n    self.data.x = newX\n')))}p.isMDXComponent=!0}}]);